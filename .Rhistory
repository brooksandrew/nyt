base.dir = site.path)
opts_chunk$set(fig.path   = fig.dir,
fig.width  = 8.5,
fig.height = 5.25,
dev        = 'svg',
cache      = FALSE,
warning    = FALSE,
message    = FALSE,
cache.path = cache.path,
tidy       = FALSE)
# setwd to base
setwd(rmd.path)
# some logic to help us avoid overwriting already existing md files
files.rmd <-
data.frame(rmd = list.files(path = rmd.path,
full.names = TRUE,
pattern = "\\.Rmd$",
ignore.case = TRUE,
recursive = FALSE))
files.rmd$corresponding.md.file <-
paste0(posts.path, "/",
basename(gsub(pattern = "\\.Rmd$",
replacement = ".md",
x = files.rmd$rmd)))
files.rmd$corresponding.md.exists <- file.exists(files.rmd$corresponding.md.file)
files.rmd$md.overwrite <- overwrite
files.rmd$md.render <- FALSE
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$corresponding.md.exists[i] == FALSE) {
files.rmd$md.render[i] <- TRUE
}
if ((files.rmd$corresponding.md.exists[i] == TRUE) &&
(files.rmd$md.overwrite[i] == TRUE)) {
files.rmd$md.render[i] <- TRUE
}
}
# For each Rmd file, render markdown (contingent on the flags set above)
for (i in 1:dim(files.rmd)[1]) {
# if clause to make sure we only re-knit if overwrite==TRUE or .md not already existing
if (files.rmd$md.render[i] == TRUE) {
# KNITTING ----
#out.file <- basename(knit(files.rmd$rmd[i], envir = parent.frame(), quiet = TRUE))
out.file <-
knit(as.character(files.rmd$rmd[i]),
output = as.character(files.rmd$corresponding.md.file[i]),
envir = parent.frame(),
quiet = TRUE)
message(paste0("KnitPost(): ", basename(files.rmd$rmd[i])))
}
}
}
KnitPost(overwrite = T)
library('knitr')
#!/usr/bin/env Rscript
options(stringsAsFactors = FALSE)
# inspiration sources:
# http://www.jonzelner.net/jekyll/knitr/r/2014/07/02/autogen-knitr/
# http://gtog.github.io/workflow/2013/06/12/rmarkdown-to-rbloggers/
KnitPost <- function(overwrite = FALSE) {
# convert all Rmd files in _Rmd/* to markdown files
# directory of jekyll blog (including trailing slash)
site.path <- "/Users/abrooks/Documents/github/simpleblog/"
# directory where your Rmd-files reside (relative to base)
rmd.path <- paste0(site.path, "_Rmd")
# directory to save figures
fig.dir <- "assets/Rfig/"
# directory for converted markdown files
posts.path <- paste0(site.path, "_posts/articles/")
# cache
cache.path <- paste0(site.path, "_cache")
#library('knitr')
render_jekyll(highlight = "pygments")
# "base.dir is never used when composing the URL of the figures; it is
# only used to save the figures to a different directory, which can
# be useful when you do not want the figures to be saved under the
# current working directory.
# The URL of an image is always base.url + fig.path"
# https://groups.google.com/forum/#!topic/knitr/18aXpOmsumQ
opts_knit$set(base.url = '/',
base.dir = site.path)
opts_chunk$set(fig.path   = fig.dir,
fig.width  = 8.5,
fig.height = 5.25,
dev        = 'svg',
cache      = FALSE,
warning    = FALSE,
message    = FALSE,
cache.path = cache.path,
tidy       = FALSE)
# setwd to base
setwd(rmd.path)
# some logic to help us avoid overwriting already existing md files
files.rmd <-
data.frame(rmd = list.files(path = rmd.path,
full.names = TRUE,
pattern = "\\.Rmd$",
ignore.case = TRUE,
recursive = FALSE))
files.rmd$corresponding.md.file <-
paste0(posts.path, "/",
basename(gsub(pattern = "\\.Rmd$",
replacement = ".md",
x = files.rmd$rmd)))
files.rmd$corresponding.md.exists <- file.exists(files.rmd$corresponding.md.file)
files.rmd$md.overwrite <- overwrite
files.rmd$md.render <- FALSE
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$corresponding.md.exists[i] == FALSE) {
files.rmd$md.render[i] <- TRUE
}
if ((files.rmd$corresponding.md.exists[i] == TRUE) &&
(files.rmd$md.overwrite[i] == TRUE)) {
files.rmd$md.render[i] <- TRUE
}
}
# For each Rmd file, render markdown (contingent on the flags set above)
for (i in 1:dim(files.rmd)[1]) {
# if clause to make sure we only re-knit if overwrite==TRUE or .md not already existing
if (files.rmd$md.render[i] == TRUE) {
# KNITTING ----
#out.file <- basename(knit(files.rmd$rmd[i], envir = parent.frame(), quiet = TRUE))
out.file <-
knit(as.character(files.rmd$rmd[i]),
output = as.character(files.rmd$corresponding.md.file[i]),
envir = parent.frame(),
quiet = TRUE)
message(paste0("KnitPost(): ", basename(files.rmd$rmd[i])))
}
}
}
KnitPost(overwrite = T)
KnitPost <- function(overwrite = FALSE) {
library('knitr')
# convert all Rmd files in _Rmd/* to markdown files
# directory of jekyll blog (including trailing slash)
site.path <- "/Users/abrooks/Documents/github/simpleblog/"
# directory where your Rmd-files reside (relative to base)
rmd.path <- paste0(site.path, "_Rmd")
# directory to save figures
fig.dir <- "assets/Rfig/"
# directory for converted markdown files
posts.path <- paste0(site.path, "_posts/articles/")
# cache
cache.path <- paste0(site.path, "_cache")
#library('knitr')
render_jekyll(highlight = "pygments")
# "base.dir is never used when composing the URL of the figures; it is
# only used to save the figures to a different directory, which can
# be useful when you do not want the figures to be saved under the
# current working directory.
# The URL of an image is always base.url + fig.path"
# https://groups.google.com/forum/#!topic/knitr/18aXpOmsumQ
opts_knit$set(base.url = '/',
base.dir = site.path)
opts_chunk$set(fig.path   = fig.dir,
fig.width  = 8.5,
fig.height = 5.25,
dev        = 'svg',
cache      = FALSE,
warning    = FALSE,
message    = FALSE,
cache.path = cache.path,
tidy       = FALSE)
# setwd to base
setwd(rmd.path)
# some logic to help us avoid overwriting already existing md files
files.rmd <-
data.frame(rmd = list.files(path = rmd.path,
full.names = TRUE,
pattern = "\\.Rmd$",
ignore.case = TRUE,
recursive = FALSE))
files.rmd$corresponding.md.file <-
paste0(posts.path, "/",
basename(gsub(pattern = "\\.Rmd$",
replacement = ".md",
x = files.rmd$rmd)))
files.rmd$corresponding.md.exists <- file.exists(files.rmd$corresponding.md.file)
files.rmd$md.overwrite <- overwrite
files.rmd$md.render <- FALSE
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$corresponding.md.exists[i] == FALSE) {
files.rmd$md.render[i] <- TRUE
}
if ((files.rmd$corresponding.md.exists[i] == TRUE) &&
(files.rmd$md.overwrite[i] == TRUE)) {
files.rmd$md.render[i] <- TRUE
}
}
# For each Rmd file, render markdown (contingent on the flags set above)
for (i in 1:dim(files.rmd)[1]) {
# if clause to make sure we only re-knit if overwrite==TRUE or .md not already existing
if (files.rmd$md.render[i] == TRUE) {
# KNITTING ----
#out.file <- basename(knit(files.rmd$rmd[i], envir = parent.frame(), quiet = TRUE))
out.file <-
knit(as.character(files.rmd$rmd[i]),
output = as.character(files.rmd$corresponding.md.file[i]),
envir = parent.frame(),
quiet = TRUE)
message(paste0("KnitPost(): ", basename(files.rmd$rmd[i])))
}
}
}
KnitPost(overwrite = T)
library('devtools')
install_github('yihui/knitr')
library('knitr')
#!/usr/bin/env Rscript
options(stringsAsFactors = FALSE)
# inspiration sources:
# http://www.jonzelner.net/jekyll/knitr/r/2014/07/02/autogen-knitr/
# http://gtog.github.io/workflow/2013/06/12/rmarkdown-to-rbloggers/
KnitPost <- function(site.path='/Users/abrooks/Documents/github/simpleblog/', overwrite=FALSE) {
library('knitr')
# convert all Rmd files in _Rmd/* to markdown files
# directory of jekyll blog (including trailing slash)
site.path <- site.path
# directory where your Rmd-files reside (relative to base)
rmd.path <- paste0(site.path, "_Rmd")
# directory to save figures
fig.dir <- "assets/Rfig/"
# directory for converted markdown files
posts.path <- paste0(site.path, "_posts/articles/")
# cache
cache.path <- paste0(site.path, "_cache")
#library('knitr')
render_jekyll(highlight = "pygments")
# "base.dir is never used when composing the URL of the figures; it is
# only used to save the figures to a different directory, which can
# be useful when you do not want the figures to be saved under the
# current working directory.
# The URL of an image is always base.url + fig.path"
# https://groups.google.com/forum/#!topic/knitr/18aXpOmsumQ
opts_knit$set(base.url = '/',
base.dir = site.path)
opts_chunk$set(fig.path   = fig.dir,
fig.width  = 8.5,
fig.height = 5.25,
dev        = 'svg',
cache      = FALSE,
warning    = FALSE,
message    = FALSE,
cache.path = cache.path,
tidy       = FALSE)
# setwd to base
setwd(rmd.path)
# some logic to help us avoid overwriting already existing md files
files.rmd <-
data.frame(rmd = list.files(path = rmd.path,
full.names = TRUE,
pattern = "\\.Rmd$",
ignore.case = TRUE,
recursive = FALSE))
files.rmd$corresponding.md.file <-
paste0(posts.path, "/",
basename(gsub(pattern = "\\.Rmd$",
replacement = ".md",
x = files.rmd$rmd)))
files.rmd$corresponding.md.exists <- file.exists(files.rmd$corresponding.md.file)
files.rmd$md.overwrite <- overwrite
files.rmd$md.render <- FALSE
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$corresponding.md.exists[i] == FALSE) {
files.rmd$md.render[i] <- TRUE
}
if ((files.rmd$corresponding.md.exists[i] == TRUE) &&
(files.rmd$md.overwrite[i] == TRUE)) {
files.rmd$md.render[i] <- TRUE
}
}
# For each Rmd file, render markdown (contingent on the flags set above)
for (i in 1:dim(files.rmd)[1]) {
# if clause to make sure we only re-knit if overwrite==TRUE or .md not already existing
if (files.rmd$md.render[i] == TRUE) {
# KNITTING ----
#out.file <- basename(knit(files.rmd$rmd[i], envir = parent.frame(), quiet = TRUE))
out.file <-
knit(as.character(files.rmd$rmd[i]),
output = as.character(files.rmd$corresponding.md.file[i]),
envir = parent.frame(),
quiet = TRUE)
message(paste0("KnitPost(): ", basename(files.rmd$rmd[i])))
}
}
}
KnitPost(overwrite = T)
rmd.path
library('knitr')
# convert all Rmd files in _Rmd/* to markdown files
# directory of jekyll blog (including trailing slash)
site.path <- site.path
# directory where your Rmd-files reside (relative to base)
rmd.path <- paste0(site.path, "_Rmd")
# directory to save figures
fig.dir <- "assets/Rfig/"
# directory for converted markdown files
posts.path <- paste0(site.path, "_posts/articles/")
# cache
cache.path <- paste0(site.path, "_cache")
#library('knitr')
render_jekyll(highlight = "pygments")
# "base.dir is never used when composing the URL of the figures; it is
# only used to save the figures to a different directory, which can
# be useful when you do not want the figures to be saved under the
# current working directory.
# The URL of an image is always base.url + fig.path"
# https://groups.google.com/forum/#!topic/knitr/18aXpOmsumQ
opts_knit$set(base.url = '/',
base.dir = site.path)
opts_chunk$set(fig.path   = fig.dir,
fig.width  = 8.5,
fig.height = 5.25,
dev        = 'svg',
cache      = FALSE,
warning    = FALSE,
message    = FALSE,
cache.path = cache.path,
tidy       = FALSE)
# setwd to base
setwd(rmd.path)
site.path='/Users/abrooks/Documents/github/simpleblog/'
library('knitr')
# convert all Rmd files in _Rmd/* to markdown files
# directory of jekyll blog (including trailing slash)
site.path <- site.path
# directory where your Rmd-files reside (relative to base)
rmd.path <- paste0(site.path, "_Rmd")
# directory to save figures
fig.dir <- "assets/Rfig/"
# directory for converted markdown files
posts.path <- paste0(site.path, "_posts/articles/")
# cache
cache.path <- paste0(site.path, "_cache")
#library('knitr')
render_jekyll(highlight = "pygments")
# "base.dir is never used when composing the URL of the figures; it is
# only used to save the figures to a different directory, which can
# be useful when you do not want the figures to be saved under the
# current working directory.
# The URL of an image is always base.url + fig.path"
# https://groups.google.com/forum/#!topic/knitr/18aXpOmsumQ
opts_knit$set(base.url = '/',
base.dir = site.path)
opts_chunk$set(fig.path   = fig.dir,
fig.width  = 8.5,
fig.height = 5.25,
dev        = 'svg',
cache      = FALSE,
warning    = FALSE,
message    = FALSE,
cache.path = cache.path,
tidy       = FALSE)
# setwd to base
setwd(rmd.path)
# some logic to help us avoid overwriting already existing md files
files.rmd <-
data.frame(rmd = list.files(path = rmd.path,
full.names = TRUE,
pattern = "\\.Rmd$",
ignore.case = TRUE,
recursive = FALSE))
files.rmd$corresponding.md.file <-
paste0(posts.path, "/",
basename(gsub(pattern = "\\.Rmd$",
replacement = ".md",
x = files.rmd$rmd)))
files.rmd$corresponding.md.exists <- file.exists(files.rmd$corresponding.md.file)
files.rmd$md.overwrite <- overwrite
files.rmd$md.render <- FALSE
for (i in 1:dim(files.rmd)[1]) {
if (files.rmd$corresponding.md.exists[i] == FALSE) {
files.rmd$md.render[i] <- TRUE
}
if ((files.rmd$corresponding.md.exists[i] == TRUE) &&
(files.rmd$md.overwrite[i] == TRUE)) {
files.rmd$md.render[i] <- TRUE
}
}
list.files(path = rmd.path,
full.names = TRUE,
pattern = "\\.Rmd$",
ignore.case = TRUE,
recursive = FALSE))
files.rmd <-
data.frame(rmd = list.files(path = rmd.path,
full.names = TRUE,
pattern = "\\.Rmd$",
ignore.case = TRUE,
recursive = FALSE))
View(files.rmd)
fig.dir
opts_chunk$get('fig.path')
library('httr')
library('XML')
## url generated from NYT API documentation
setwd('/Users/abrooks/Documents/github/nyt')
artkey <- scan('key.txt')
artkey <- read.txt('key.txt')
artkey <- read('key.txt')
artkey <- read.table('key.txt')
View(artkey)
?scan
setwd('/Users/abrooks/Documents/github/nyt')
artkey <- scan('key.txt')
artkey <- scan('key.txt', what='character')
artkey
url <- paste0('http://api.nytimes.com/svc/search/v2/articlesearch.json?callback=svc_search_v2_articlesearch&
begin_date=20120101&end_date=20130101&api-key=','sample-key')
pagetxt <- GET(url)
pagetxt
art <- sapply(page$response$docs, function(x) c(x['word_count'],
x['snippet'],
x['pub_date'],
x['web_url']))
page <- content(pagetxt, 'parsed')
page
art <- sapply(page$response$docs, function(x) c(x['word_count'],
x['snippet'],
x['pub_date'],
x['web_url']))
url <- paste0('http://api.nytimes.com/svc/search/v2/articlesearch.json?',
'q=data+science',
'&begin_date=20110101&end_date=20120101',
'&api-key=', artkey,
'&page=25')
pagetxt <- GET(url)
pagetxt
page <- content(pagetxt, 'parsed')
page
art <- sapply(page$response$docs, function(x) c(x['word_count'],
x['snippet'],
x['pub_date'],
x['web_url']))
getArtURL <- function(q=NULL, fq=NULL, begin_date=NULL, end_date=NULL, key=getOption("nyt_as_key"), page=0){
arglist <- list(q=q, fq=fq, begin_date=begin_date, end_date=end_date, 'api-key'=key, page=page)
url <- 'http://api.nytimes.com/svc/search/v2/articlesearch.json?'
for(i in 1:length(arglist)){
if(is.null(unlist(arglist[i]))==F){
url <- paste0(url, '&', names(arglist[i]), '=', arglist[i])
}
}
return(url)
}
library('httr')
url <- getArt(q='andrew+brooks', begin_date='20110101', end_date='20131025', key='sample-key')
url <- getArtURL(q='andrew+brooks', begin_date='20110101', end_date='20131025', key='sample-key')
url
nyt_as_get_meta <- function(url, pages=Inf) {
art <- list()
i <- 1
while(i<pages){
print(i)
urlp <- gsub('page=\\d+', paste0('page=', i), url)
p <- GET(urlp)
pt <- content(p, 'parsed')
if(length(pt$response$docs)>0) art <- append(art, pt$response$docs)
else {print(paste0(i, ' pages collected')); break}
i <- i+1
}
return(art)
}
url <- getArtURL(q='andrew+brooks', begin_date='20110101', end_date='20111025', key='sample-key')
a <- nyt_as_get_meta(url, pages=100)
head(a)
a
class(a)
length(a)
nyt_as_get_art <- function(art_urls, n=Inf) {
artxt <- list()
for(i in 1:(min(length(art_urls), n))){
try({
print(i)
p <- GET(art_urls[i])
pt <- content(p, 'text')
artxt <- append(artxt, pt)
})
}
return(artxt)
}
urls <- unlist(sapply(a, function(x) x['web_url']))
urls
artxt <- nyt_as_get_art(urls, n=12)
artxt
View(artxt[[1]])
View(artxt[[3]])
View(artxt[3])
get_body <- function(arts) {
artbody <- list()
xpath2try <- c('//div[@class="articleBody"]//p',
'//p[@class="story-body-text story-content"]',
'//p[@class="story-body-text"]'
)
for(i in 1:length(arts)) {
print(i)
for(xp in xpath2try) {
bodyi <- paste(xpathSApply(htmlParse(arts[[i]]), xp, xmlValue), collapse='')
if(nchar(bodyi)>0) break
}
artbody <- append(artbody, list(bodyi))
}
return(artbody)
}
bb <- get_body(artxt)
bb[[1]]
bb[[2]]
View(bb[[2]])
?write.csv
setwd('/Users/abrooks/Documents/github/nyt'
)
write.csv(bb[[1]], file='art1.csv')
pJS <- phantom() # can't get non-phantom browser to work on mac
